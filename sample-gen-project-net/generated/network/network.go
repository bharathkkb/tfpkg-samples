// This file is generated by github.com/bharathkkb/tfpkg. Do not edit.
package network

import "github.com/bharathkkb/tfpkg/pkg/tfgen"

// Inputs marked as required by the module
type RequiredAttrib struct {
	Subnets     []map[string]string
	NetworkName string
	ProjectId   string
}

// Inputs with a default value in the module
type OptionalAttrib struct {
	RoutingMode                        string
	SharedVpcHost                      bool
	FirewallRules                      string
	DeleteDefaultInternetGatewayRoutes bool
	Mtu                                int
	SecondaryRanges                    map[string][]string
	Routes                             []map[string]string
	Description                        string
	AutoCreateSubnetworks              bool
}
type Mod struct {
	tfgen.Module
	Required *RequiredAttrib
	Optional *OptionalAttrib
}

func New(name string, required *RequiredAttrib, optional *OptionalAttrib) Mod {
	mod := tfgen.NewModule(name, tfgen.ModuleWithSource("terraform-google-modules/network/google"))
	n := Mod{
		Module:   *mod,
		Optional: optional,
		Required: required,
	}
	n.AddAttribute("subnets", required.Subnets)
	n.AddAttribute("network_name", required.NetworkName)
	n.AddAttribute("project_id", required.ProjectId)
	n.AddAttribute("routing_mode", optional.RoutingMode)
	n.AddAttribute("delete_default_internet_gateway_routes", optional.DeleteDefaultInternetGatewayRoutes)
	n.AddAttribute("mtu", optional.Mtu)
	n.AddAttribute("secondary_ranges", optional.SecondaryRanges)
	n.AddAttribute("description", optional.Description)
	n.AddAttribute("shared_vpc_host", optional.SharedVpcHost)
	n.AddAttribute("firewall_rules", optional.FirewallRules)
	n.AddAttribute("routes", optional.Routes)
	n.AddAttribute("auto_create_subnetworks", optional.AutoCreateSubnetworks)
	return n
}

// Getters for output references from the module
func (m Mod) GetNetworkNameRef() string {
	return m.Ref("network_name")
}

func (m Mod) GetNetworkIdRef() string {
	return m.Ref("network_id")
}

func (m Mod) GetSubnetsIpsRef() string {
	return m.Ref("subnets_ips")
}

func (m Mod) GetSubnetsSelfLinksRef() string {
	return m.Ref("subnets_self_links")
}

func (m Mod) GetNetworkRef() string {
	return m.Ref("network")
}

func (m Mod) GetSubnetsIdsRef() string {
	return m.Ref("subnets_ids")
}

func (m Mod) GetSubnetsRegionsRef() string {
	return m.Ref("subnets_regions")
}

func (m Mod) GetSubnetsFlowLogsRef() string {
	return m.Ref("subnets_flow_logs")
}

func (m Mod) GetSubnetsSecondaryRangesRef() string {
	return m.Ref("subnets_secondary_ranges")
}

func (m Mod) GetRouteNamesRef() string {
	return m.Ref("route_names")
}

func (m Mod) GetProjectIdRef() string {
	return m.Ref("project_id")
}

func (m Mod) GetSubnetsRef() string {
	return m.Ref("subnets")
}

func (m Mod) GetSubnetsNamesRef() string {
	return m.Ref("subnets_names")
}

func (m Mod) GetSubnetsPrivateAccessRef() string {
	return m.Ref("subnets_private_access")
}

func (m Mod) GetNetworkSelfLinkRef() string {
	return m.Ref("network_self_link")
}

// Setters for setting references as inputs
func (m *Mod) SetRoutesAsRef(ref string) {
	m.AddAttribute("routes", ref)
}

func (m *Mod) SetDescriptionAsRef(ref string) {
	m.AddAttribute("description", ref)
}

func (m *Mod) SetAutoCreateSubnetworksAsRef(ref string) {
	m.AddAttribute("auto_create_subnetworks", ref)
}

func (m *Mod) SetProjectIdAsRef(ref string) {
	m.AddAttribute("project_id", ref)
}

func (m *Mod) SetSecondaryRangesAsRef(ref string) {
	m.AddAttribute("secondary_ranges", ref)
}

func (m *Mod) SetSharedVpcHostAsRef(ref string) {
	m.AddAttribute("shared_vpc_host", ref)
}

func (m *Mod) SetSubnetsAsRef(ref string) {
	m.AddAttribute("subnets", ref)
}

func (m *Mod) SetFirewallRulesAsRef(ref string) {
	m.AddAttribute("firewall_rules", ref)
}

func (m *Mod) SetDeleteDefaultInternetGatewayRoutesAsRef(ref string) {
	m.AddAttribute("delete_default_internet_gateway_routes", ref)
}

func (m *Mod) SetMtuAsRef(ref string) {
	m.AddAttribute("mtu", ref)
}

func (m *Mod) SetNetworkNameAsRef(ref string) {
	m.AddAttribute("network_name", ref)
}

func (m *Mod) SetRoutingModeAsRef(ref string) {
	m.AddAttribute("routing_mode", ref)
}
